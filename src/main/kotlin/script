//import java.lang.String as StringJava

//    println("Bem vindo ao Bytebank")
//    testaComportamentosConta()
//    testaFuncionarios()
//    testaContasDiferentes()
//    testaCopiasEReferencias()
//    testaFuncionarios()
//    testaAutenticacao()
//    testaObjects()

//    val palavra: kotlin.String = ""
//    Mesma coisa com uso do alias
//    val palavraJava: StringJava = StringJava("")
//    val palavraJava: java.lang.String = java.lang.String("")

//    val cliente = Cliente(nome = "Alex", cpf = "", senha = 1234)
//    tecnica de utilizar apelidos no import para classes com mesmo nome para evitar conflito
//    val clienteNovo = NovoCliente()

  //sobrecarga implicita
    val endereco = Endereco(logradouro = "")

    val objeto: Any = Any()

    //ao rodar em tempo de compilação em runtime ele vai se tornar object
    //imprime(Any())
    imprime(objeto)
    imprime(Unit)

    imprime(1) //sobrecarga
    imprime(1.0) //sobrecarga
    val teste: Any = imprime(endereco)
    println(teste)

    testaFuncionarios()

    //tudo é um objeto - Unit mesmo não devolvendo nada e considerado um objeto, tudo vai retornar pelo menos um objeto
    fun imprime(valor: Any) : Any{
        println(valor)
        return valor
    }
